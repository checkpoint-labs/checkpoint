// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`codegen should generate javascript code 1`] = `
"import { Model } from '@snapshot-labs/checkpoint';

export class Space extends Model {
  static tableName = 'spaces';

  constructor(id) {
    super(Space.tableName);

    this.initialSet('id', id);
    this.initialSet('name', null);
    this.initialSet('about', null);
    this.initialSet('controller', "");
    this.initialSet('voting_delay', 0);
    this.initialSet('proposal_threshold', 0);
    this.initialSet('quorum', 0);
    this.initialSet('strategies', []);
    this.initialSet('strategies_nonnull', []);
  }

  static async loadEntity(id) {
    const entity = await super.loadEntity(Space.tableName, id);
    if (!entity) return null;

    const model = new Space(id);
    model.setExists();

    for (const key in entity) {
      model.set(key, entity[key]);
    }

    return model;
  }

  get id() {
    return this.get('id');
  }

  set id(value) {
    this.set('id', value);
  }

  get name() {
    return this.get('name');
  }

  set name(value) {
    this.set('name', value);
  }

  get about() {
    return this.get('about');
  }

  set about(value) {
    this.set('about', value);
  }

  get controller() {
    return this.get('controller');
  }

  set controller(value) {
    this.set('controller', value);
  }

  get voting_delay() {
    return this.get('voting_delay');
  }

  set voting_delay(value) {
    this.set('voting_delay', value);
  }

  get proposal_threshold() {
    return this.get('proposal_threshold');
  }

  set proposal_threshold(value) {
    this.set('proposal_threshold', value);
  }

  get quorum() {
    return this.get('quorum');
  }

  set quorum(value) {
    this.set('quorum', value);
  }

  get strategies() {
    return JSON.parse(this.get('strategies'));
  }

  set strategies(value) {
    this.set('strategies', JSON.stringify(value));
  }

  get strategies_nonnull() {
    return JSON.parse(this.get('strategies_nonnull'));
  }

  set strategies_nonnull(value) {
    this.set('strategies_nonnull', JSON.stringify(value));
  }
}

export class Proposal extends Model {
  static tableName = 'proposals';

  constructor(id) {
    super(Proposal.tableName);

    this.initialSet('id', id);
    this.initialSet('proposal_id', 0);
    this.initialSet('space', "");
    this.initialSet('title', "");
    this.initialSet('scores_total', 0);
    this.initialSet('active', false);
    this.initialSet('progress', "0");
  }

  static async loadEntity(id) {
    const entity = await super.loadEntity(Proposal.tableName, id);
    if (!entity) return null;

    const model = new Proposal(id);
    model.setExists();

    for (const key in entity) {
      model.set(key, entity[key]);
    }

    return model;
  }

  get id() {
    return this.get('id');
  }

  set id(value) {
    this.set('id', value);
  }

  get proposal_id() {
    return this.get('proposal_id');
  }

  set proposal_id(value) {
    this.set('proposal_id', value);
  }

  get space() {
    return this.get('space');
  }

  set space(value) {
    this.set('space', value);
  }

  get title() {
    return this.get('title');
  }

  set title(value) {
    this.set('title', value);
  }

  get scores_total() {
    return this.get('scores_total');
  }

  set scores_total(value) {
    this.set('scores_total', value);
  }

  get active() {
    return this.get('active');
  }

  set active(value) {
    this.set('active', value);
  }

  get progress() {
    return this.get('progress');
  }

  set progress(value) {
    this.set('progress', value);
  }
}
"
`;

exports[`codegen should generate typescript code 1`] = `
"import { Model } from '@snapshot-labs/checkpoint';

export class Space extends Model {
  static tableName = 'spaces';

  constructor(id: string) {
    super(Space.tableName);

    this.initialSet('id', id);
    this.initialSet('name', null);
    this.initialSet('about', null);
    this.initialSet('controller', "");
    this.initialSet('voting_delay', 0);
    this.initialSet('proposal_threshold', 0);
    this.initialSet('quorum', 0);
    this.initialSet('strategies', []);
    this.initialSet('strategies_nonnull', []);
  }

  static async loadEntity(id: string): Promise<Space | null> {
    const entity = await super.loadEntity(Space.tableName, id);
    if (!entity) return null;

    const model = new Space(id);
    model.setExists();

    for (const key in entity) {
      model.set(key, entity[key]);
    }

    return model;
  }

  get id(): string {
    return this.get('id');
  }

  set id(value: string) {
    this.set('id', value);
  }

  get name(): string | null {
    return this.get('name');
  }

  set name(value: string | null) {
    this.set('name', value);
  }

  get about(): string | null {
    return this.get('about');
  }

  set about(value: string | null) {
    this.set('about', value);
  }

  get controller(): string {
    return this.get('controller');
  }

  set controller(value: string) {
    this.set('controller', value);
  }

  get voting_delay(): number {
    return this.get('voting_delay');
  }

  set voting_delay(value: number) {
    this.set('voting_delay', value);
  }

  get proposal_threshold(): bigint {
    return this.get('proposal_threshold');
  }

  set proposal_threshold(value: bigint) {
    this.set('proposal_threshold', value);
  }

  get quorum(): number {
    return this.get('quorum');
  }

  set quorum(value: number) {
    this.set('quorum', value);
  }

  get strategies(): string[] {
    return JSON.parse(this.get('strategies'));
  }

  set strategies(value: string[]) {
    this.set('strategies', JSON.stringify(value));
  }

  get strategies_nonnull(): string[] {
    return JSON.parse(this.get('strategies_nonnull'));
  }

  set strategies_nonnull(value: string[]) {
    this.set('strategies_nonnull', JSON.stringify(value));
  }
}

export class Proposal extends Model {
  static tableName = 'proposals';

  constructor(id: string) {
    super(Proposal.tableName);

    this.initialSet('id', id);
    this.initialSet('proposal_id', 0);
    this.initialSet('space', "");
    this.initialSet('title', "");
    this.initialSet('scores_total', 0);
    this.initialSet('active', false);
    this.initialSet('progress', "0");
  }

  static async loadEntity(id: string): Promise<Proposal | null> {
    const entity = await super.loadEntity(Proposal.tableName, id);
    if (!entity) return null;

    const model = new Proposal(id);
    model.setExists();

    for (const key in entity) {
      model.set(key, entity[key]);
    }

    return model;
  }

  get id(): string {
    return this.get('id');
  }

  set id(value: string) {
    this.set('id', value);
  }

  get proposal_id(): number {
    return this.get('proposal_id');
  }

  set proposal_id(value: number) {
    this.set('proposal_id', value);
  }

  get space(): string {
    return this.get('space');
  }

  set space(value: string) {
    this.set('space', value);
  }

  get title(): string {
    return this.get('title');
  }

  set title(value: string) {
    this.set('title', value);
  }

  get scores_total(): bigint {
    return this.get('scores_total');
  }

  set scores_total(value: bigint) {
    this.set('scores_total', value);
  }

  get active(): boolean {
    return this.get('active');
  }

  set active(value: boolean) {
    this.set('active', value);
  }

  get progress(): string {
    return this.get('progress');
  }

  set progress(value: string) {
    this.set('progress', value);
  }
}
"
`;
