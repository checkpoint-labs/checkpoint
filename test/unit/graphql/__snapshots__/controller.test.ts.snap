// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[` 1`] = `"'id' field for type Vote must be non nullable."`;

exports[` 2`] = `"'id' field for type Vote is not a scalar type."`;

exports[` 3`] = `"'id' field for type Participant is not a scalar type."`;

exports[`GqlEntityController createEntityStores should work 1`] = `
"drop table if exists \`votes\`;
create table \`votes\` (\`uid\` char(36) default (lower(hex(randomblob(4))) || '-' || lower(hex(randomblob(2))) || '-4' || substr(lower(hex(randomblob(2))),2) || '-' || substr('89ab',abs(random()) % 4 + 1, 1) || substr(lower(hex(randomblob(2))),2) || '-' || lower(hex(randomblob(6)))), \`block_range\` int8range not null, \`id\` integer not null, \`name\` varchar(256), \`authenticators\` json, \`big_number\` bigint, \`decimal\` float, \`big_decimal\` float, primary key (\`uid\`));
create index \`votes_id_index\` on \`votes\` (\`id\`);
create index \`votes_name_index\` on \`votes\` (\`name\`);
create index \`votes_authenticators_index\` on \`votes\` (\`authenticators\`);
create index \`votes_big_number_index\` on \`votes\` (\`big_number\`);
create index \`votes_decimal_index\` on \`votes\` (\`decimal\`);
create index \`votes_big_decimal_index\` on \`votes\` (\`big_decimal\`)"
`;

exports[`GqlEntityController generateQueryFields should work 1`] = `
"type Query {
  vote(id: Int!, indexer: String, block: Int): Vote
  votes(first: Int, skip: Int, orderBy: Vote_orderBy, orderDirection: OrderDirection, indexer: String, block: Int, where: Vote_filter): [Vote]
}

type Vote {
  id: Int!
  name: String
  authenticators: [String]
}

enum Vote_orderBy {
  id
  name
}

enum OrderDirection {
  asc
  desc
}

input Vote_filter {
  id_gt: Int
  id_gte: Int
  id_lt: Int
  id_lte: Int
  id: Int
  id_not: Int
  id_in: [Int]
  id_not_in: [Int]
  name_contains: String
  name_not_contains: String
  name_contains_nocase: String
  name_not_contains_nocase: String
  name: String
  name_not: String
  name_in: [String]
  name_not_in: [String]
  authenticators: [String]
  authenticators_not: [String]
  authenticators_contains: [String]
  authenticators_not_contains: [String]
}"
`;

exports[`GqlEntityController generateSampleQuery should generate query schema 1`] = `
"type Query {
  vote(id: Int!, indexer: String, block: Int): Vote
  votes(first: Int, skip: Int, orderBy: Vote_orderBy, orderDirection: OrderDirection, indexer: String, block: Int, where: Vote_filter): [Vote]
  _metadata(id: ID!, indexer: String, block: Int): _Metadata
  _metadatas(first: Int, skip: Int, orderBy: _Metadata_orderBy, orderDirection: OrderDirection, indexer: String, block: Int, where: _Metadata_filter): [_Metadata]
  _checkpoint(id: ID!, indexer: String, block: Int): _Checkpoint
  _checkpoints(first: Int, skip: Int, orderBy: _Checkpoint_orderBy, orderDirection: OrderDirection, indexer: String, block: Int, where: _Checkpoint_filter): [_Checkpoint]
}

type Vote {
  id: Int!
  name: String
  authenticators: [String]
}

enum Vote_orderBy {
  id
  name
}

enum OrderDirection {
  asc
  desc
}

input Vote_filter {
  id_gt: Int
  id_gte: Int
  id_lt: Int
  id_lte: Int
  id: Int
  id_not: Int
  id_in: [Int]
  id_not_in: [Int]
  name_contains: String
  name_not_contains: String
  name_contains_nocase: String
  name_not_contains_nocase: String
  name: String
  name_not: String
  name_in: [String]
  name_not_in: [String]
  authenticators: [String]
  authenticators_not: [String]
  authenticators_contains: [String]
  authenticators_not_contains: [String]
}

"""Core metadata values used internally by Checkpoint"""
type _Metadata {
  """example: last_indexed_block"""
  id: ID!
  indexer: String!
  value: String
}

enum _Metadata_orderBy {
  id
  indexer
  value
}

input _Metadata_filter {
  id: ID
  id_not: ID
  id_in: [ID]
  id_not_in: [ID]
  indexer_contains: String
  indexer_not_contains: String
  indexer_contains_nocase: String
  indexer_not_contains_nocase: String
  indexer: String
  indexer_not: String
  indexer_in: [String]
  indexer_not_in: [String]
  value_contains: String
  value_not_contains: String
  value_contains_nocase: String
  value_not_contains_nocase: String
  value: String
  value_not: String
  value_in: [String]
  value_not_in: [String]
}

"""Contract and Block where its event is found."""
type _Checkpoint {
  """id computed as last 5 bytes of sha256(contract+block)"""
  id: ID!
  indexer: String!
  block_number: Int!
  contract_address: String!
}

enum _Checkpoint_orderBy {
  id
  indexer
  block_number
  contract_address
}

input _Checkpoint_filter {
  id: ID
  id_not: ID
  id_in: [ID]
  id_not_in: [ID]
  indexer_contains: String
  indexer_not_contains: String
  indexer_contains_nocase: String
  indexer_not_contains_nocase: String
  indexer: String
  indexer_not: String
  indexer_in: [String]
  indexer_not_in: [String]
  block_number_gt: Int
  block_number_gte: Int
  block_number_lt: Int
  block_number_lte: Int
  block_number: Int
  block_number_not: Int
  block_number_in: [Int]
  block_number_not_in: [Int]
  contract_address_contains: String
  contract_address_not_contains: String
  contract_address_contains_nocase: String
  contract_address_not_contains_nocase: String
  contract_address: String
  contract_address_not: String
  contract_address_in: [String]
  contract_address_not_in: [String]
}"
`;

exports[`GqlEntityController generateSampleQuery should return correct query sample for first and only entity 1`] = `
"
# Welcome to Checkpoint. Try running the below example query from
# your defined entity.
    
query {
    votes (first: 10) {
        id
        name
        created_at
    }
}"
`;

exports[`GqlEntityController generateSampleQuery should return correct query sample for nested objects 1`] = `
"
# Welcome to Checkpoint. Try running the below example query from
# your defined entity.
    
query {
    votes (first: 10) {
        id
        name
        poster {
            id
            name
            venue {
                id
                location
            }
        }
        created_at
    }
}"
`;
